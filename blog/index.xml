<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Vishal Lakha</title>
    <link>https://vishallakha.github.io/blog/</link>
    <description>Recent content in Blogs on Vishal Lakha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 23:29:21 +0530</lastBuildDate><atom:link href="https://vishallakha.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Siamese Neural Network for Text Similarity</title>
      <link>https://vishallakha.github.io/blog/siamese_text_similarity/</link>
      <pubDate>Thu, 03 Mar 2022 23:29:21 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/siamese_text_similarity/</guid>
      <description>Description I have implemented a Siamese Neural Network for text similarity. It takes two sentences as input and predicts the similarity between them. Here one input comes from the user and the other input is a entire dataset of documents in the data lake. It implements BERT embeddings for both the sentences, takes the average pooling and gives the output as 1024 dimensional vector embeddings. These embeddings are stored in Mongo DB so that they can be easily used again and again without recalculations.</description>
    </item>
    
    <item>
      <title>Object Detection and OCR</title>
      <link>https://vishallakha.github.io/blog/object_detection_and_ocr/</link>
      <pubDate>Mon, 14 Feb 2022 22:41:10 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/object_detection_and_ocr/</guid>
      <description>Objective Generate automatic Red Light Violation Tickets for Indian License Plate by detecting the License Numbers using Computer Vision.
Description  In this project, I was reading the CCTV feed(Images) of traffic Junctions, and performing the object detection task to identify the license plates for cars, motorcycles, auto rickshaws, trucks etc. I have used Tiny Yolo model as its very fast, lightweight and accurate enough to handle the load efficiently.    Once the license plate region has been identified, the cropped image is passed to the custom trained OCR model to extract out its license number.</description>
    </item>
    
    <item>
      <title>Custom Named Entity Recognition Model with Deep Learning</title>
      <link>https://vishallakha.github.io/blog/ner_model/</link>
      <pubDate>Tue, 04 Jan 2022 23:29:21 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/ner_model/</guid>
      <description>Objective Build a NLP model which can extract out the important keywords (related to a particular domain) from documents.
 Description In this project i have trained a custom Named Entity Recognition Model, which takes input of strings (max size 40) and predicts the Named Entities from the text. It used ELMo (Embeddings from Language Models) , bi directional LSTM and a time distributed dense layer.
Technology Stack Python, Keras, Tensorflow, LSTM</description>
    </item>
    
    <item>
      <title>Data Scrapper with Selenium in Python</title>
      <link>https://vishallakha.github.io/blog/selenium_scrapper/</link>
      <pubDate>Sun, 28 Nov 2021 23:29:21 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/selenium_scrapper/</guid>
      <description>Description I have written Selenium code in Python which can scrap any type of data from any website(dynamic as well as static). It uses Chrome Driver, and waits for given time till an object of a certain class is loaded completely. then it finds all relevant data related to a class name and appends the output in a proper list. This code has the potential to used in any scenario where data needs to be scraped from external sources.</description>
    </item>
    
    <item>
      <title>Estimated Time of Arrival (ETA) of Bus with Pyspark</title>
      <link>https://vishallakha.github.io/blog/pyspark_eta/</link>
      <pubDate>Fri, 03 Apr 2020 22:53:58 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/pyspark_eta/</guid>
      <description>Objective Predict the estimated time of arrival of a running bus at a bus stand with in-house intelligence.
Description  I have built a pyspark application which reads the current location and speed of a vehicle from an IVC (in-vehicle computer) and calculates the ETA using haversine distance formula which is stored with every trip during training time. Then during streaming, the ETA is calculated as the average of past values from ElasticSearch.</description>
    </item>
    
    <item>
      <title>Dynamic Pricing of Parking Charges</title>
      <link>https://vishallakha.github.io/blog/dynamic_parking_pricing/</link>
      <pubDate>Fri, 03 Apr 2020 19:53:33 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/dynamic_parking_pricing/</guid>
      <description>Objective Provide a suggestion to select the optimal pricing tiers based on demand in a parking lot.
Description  II have trained a machine learning model using Prophet (Generalized Additive Model) which predicts the occupancy percent of a parking lot for next 3 hours. this forecast is used to derive the selection of optimal pricing tier based on given options. Based on the forecast, the Parking lot administrator would receive a pop notification on his dashboard about the recommendation to change the pricing due to predicted change in the parking lot utilization.</description>
    </item>
    
    <item>
      <title>Deployment Practices</title>
      <link>https://vishallakha.github.io/blog/deployment_practices/</link>
      <pubDate>Thu, 20 Jun 2019 23:20:21 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/blog/deployment_practices/</guid>
      <description>Deployment Practices Docker I have added a basic example of Docker usage, with the usage of Docker volumes to store the logs/data in the disk. docker volume create --driver local --name varlogs --opt type=none --opt device=/var/folder_name/ --opt o=uid=root,gid=root --opt o=bind Docker container can be run with the following command along with an environment file containing the cofigurable parameters as well:
docker run -itd --restart unless-stopped --name image_name --env-file env.txt -v varlogs:/var/folder_name -h=hostname_01 hub.</description>
    </item>
    
  </channel>
</rss>
