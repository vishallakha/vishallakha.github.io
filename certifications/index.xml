<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Certifications on Vishal Lakha</title>
    <link>https://vishallakha.github.io/certifications/</link>
    <description>Recent content in Certifications on Vishal Lakha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Mar 2025 00:00:00 +0530</lastBuildDate><atom:link href="https://vishallakha.github.io/certifications/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Udemy - Ultimate AWS Solutions Architech Associate Exam 2025</title>
      <link>https://vishallakha.github.io/certifications/aws_solutions_architect/</link>
      <pubDate>Sun, 16 Mar 2025 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/aws_solutions_architect/</guid>
      <description>Certificate Link
AWS Certified Solutions Architect Associate (2025) - My Learnings Core AWS Services Compute  EC2: Instance types, Auto Scaling, Elastic Load Balancer (ELB), Placement Groups Lambda: Serverless computing, event triggers, pricing model Elastic Beanstalk: Simplified deployment of applications  Storage  S3: Storage classes, versioning, lifecycle policies, encryption EBS: Volume types, snapshots, encryption EFS: Shared storage for multiple instances, performance modes Glacier: Archival storage, retrieval options  Databases  RDS: Multi-AZ, Read Replicas, Backup &amp;amp; Restore DynamoDB: NoSQL, Global Tables, Streams Redshift: Data warehousing, columnar storage, performance tuning ElastiCache: Redis &amp;amp; Memcached, caching strategies  Networking &amp;amp; Security  VPC: Subnets, Route Tables, Security Groups, NACLs, VPC Peering IAM: Roles, Policies, Users &amp;amp; Groups, MFA, Best Practices CloudFront: CDN, Edge Locations, Signed URLs Route 53: DNS routing, Latency-based routing, Failover policies WAF &amp;amp; Shield: DDoS Protection, Web security  Monitoring &amp;amp; Logging  CloudWatch: Logs, Metrics, Alarms, Custom Dashboards CloudTrail: API activity logging, Governance &amp;amp; Compliance AWS Config: Resource configuration history, compliance auditing  High Availability &amp;amp; Disaster Recovery  Multi-AZ &amp;amp; Auto Scaling: Ensuring uptime and fault tolerance Backups &amp;amp; Snapshots: Data durability strategies Pilot Light &amp;amp; Warm Standby: Disaster recovery patterns  Cost Optimization  Reserved vs Spot Instances: Cost savings strategies AWS Trusted Advisor: Cost recommendations Budgets &amp;amp; Cost Explorer: Analyzing &amp;amp; optimizing AWS spend  </description>
    </item>
    
    <item>
      <title>Practical Multi-Armed Bandit Algorithms in Python</title>
      <link>https://vishallakha.github.io/certifications/bandits/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/bandits/</guid>
      <description>Certificate Link
Learnings from Multi-Armed Bandit (MAB) Course Introduction to Multi-Armed Bandit Problems  What is a Multi-Armed Bandit (MAB) problem? Real-world applications: Online advertising, recommendation systems, clinical trials Modelling business problems as MAB: Automating decision-making with AI agents  Reinforcement Learning &amp;amp; Exploration-Exploitation Tradeoff  The Exploration-Exploitation Dilemma: Balancing between trying new options vs exploiting known rewards Challenges in Reinforcement Learning (RL): Sample efficiency, reward design  Algorithmic Strategies for MAB Epsilon-Greedy Strategy  Concept: Balancing exploration with a probability Îµ and exploitation otherwise Python Implementation: Step-by-step coding of Epsilon-Greedy  Softmax Exploration Strategy  Concept: Selecting actions probabilistically based on their estimated values Python Implementation: Implementing Softmax exploration in Python  Optimistic Initialization Strategy  Concept: Encouraging exploration by initializing high action values Python Implementation: Coding Optimistic Initialization for MAB  Upper Confidence Bounds (UCB) Strategy  Concept: Choosing actions based on confidence intervals Python Implementation: Implementing UCB algorithm in Python  Practical Considerations in RL  Reward Function Design: Challenges in defining effective reward structures Sample Efficiency: Optimizing learning with minimal data Incremental Sampling for Action Value Estimation: Updating action values dynamically  </description>
    </item>
    
    <item>
      <title>Complete Generative AI Course With Langchain and Huggingface</title>
      <link>https://vishallakha.github.io/certifications/langchain_huggingface/</link>
      <pubDate>Sun, 29 Dec 2024 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/langchain_huggingface/</guid>
      <description>Certificate Link
Learnings from Gen AI LandChain Course  Ollama, OpenAI Use LangChain Expressions (LCEL) Conversation History Usage, StreamLit Application, Huggingface Spaces Hybrid Search, Reciprocal Rank fusion, RAG Graph Databases, Cypher Query Language, Neo4j Vector Stores, Pinecone, Chroma, Faiss LoRA, QLoRA Stateful Multi Actor Applications Using LangGraph  </description>
    </item>
    
    <item>
      <title>Mastering the System Design Interview</title>
      <link>https://vishallakha.github.io/certifications/system_design/</link>
      <pubDate>Sun, 13 Oct 2024 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/system_design/</guid>
      <description>Certificate Link
Learnings from System Design &amp;amp; Tech Interview Course Scalability &amp;amp; Resiliency  Introduction to Scalability: Understanding horizontal and vertical scaling Failover Strategies: High availability and disaster recovery mechanisms Sharding Databases / NoSQL: Partitioning strategies for handling large data Data Lakes: Managing and processing large-scale unstructured data ACID Compliance &amp;amp; CAP Theorem: Trade-offs in distributed databases Using CAP to Choose a Database: Consistency, Availability, and Partition Tolerance considerations  Caching &amp;amp; Content Delivery  Caching Introduction: How caching improves performance Caching Technologies: Memcached, Redis, and other solutions Eviction Strategies: LRU, LFU, FIFO, and other caching policies Content Distribution Networks (CDNs): Enhancing web performance and scalability  Distributed Storage &amp;amp; Big Data  Introduction to Scaling Data: Challenges and best practices Distributed Storage Solutions: HDFS, Amazon S3, Google Cloud Storage HDFS Architecture: How Hadoop Distributed File System works Apache Spark: Big data processing framework overview Cloud Computing Overview: Fundamentals of cloud-based architectures  Algorithms &amp;amp; Data Structures  Linked Lists: Concepts and implementations Graphs &amp;amp; Graph Traversal: BFS, DFS, and their applications Search Algorithms: Binary search, linear search Sort Algorithms: Quick sort, merge sort, bubble sort Information Retrieval: Indexing and searching techniques  System Design Interviews  Defining Requirements: Clarifying business and technical needs Design Strategies: Layered architecture, microservices, event-driven design Mock Interviews: Practicing real-world system design scenarios  System Design Case Studies  URL Shortening Service: Architecture and implementation Restaurant Reservation System: Handling bookings and availability Web Crawler: Designing scalable web scraping solutions Top-Sellers System: Tracking and ranking best-selling items Video Sharing Service: Handling video uploads, streaming, and distribution  </description>
    </item>
    
    <item>
      <title>Intro to Diffusion Models</title>
      <link>https://vishallakha.github.io/certifications/diffusion_models/</link>
      <pubDate>Tue, 24 Sep 2024 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/diffusion_models/</guid>
      <description>Certificate Link
Learnings from Diffusion Models Course  Forward Diffusion Process Reverse Diffusion Process Denoising Diffusion Implicit Models (DDIMs) DDPMs UNet Model Diffusion Probabilistic Models (DPMs) Inpainting Stable Diffusion  </description>
    </item>
    
    <item>
      <title>API and Web Services Introduction</title>
      <link>https://vishallakha.github.io/certifications/api_webservies/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0530</pubDate>
      
      <guid>https://vishallakha.github.io/certifications/api_webservies/</guid>
      <description>Certificate Link
Learnings from APIs and Web Services Course Introduction to APIs and Web Services  What is an API? Definition and real-world use cases Examples of APIs: Twitter API, Google Cloud API, eBay API What is a Web Service?: Web-based APIs and their significance Web Service vs API: Key differences and use cases  Core Concepts Data Formats  XML: Structure, syntax, and use cases JSON: Lightweight data format and its advantages Comparison: JSON vs XML: Performance, readability, and popularity  HTTP Fundamentals  HTTP &amp;amp; HTTPS: Protocols for communication Request Methods: GET, POST, PUT, DELETE Status Codes: 200, 400, 401, 403, 404, 500  API Architectures  SOAP (Simple Object Access Protocol): XML-based, strict standards REST (Representational State Transfer): Stateless, lightweight, widely used Comparison: SOAP vs REST: Security, performance, complexity  Authentication &amp;amp; Authorization  OAuth: Secure authorization framework OAuth Example (Google Cloud): Implementing OAuth authentication Authentication vs Authorization: Key differences and best practices OpenID Connect: Identity layer on top of OAuth  API Tools &amp;amp; Hands-on Learning  Postman: API testing and request handling Postman Authentication: No Auth, Basic Auth, Digest Auth, Bearer Token, OAuth Calling APIs using Python: Hands-on example Creating APIs in AWS: API Gateway and Lambda integration Calling APIs using Different Programming Languages: Best practices  Advanced Concepts  Webhooks: Real-time data updates and event-driven architecture Microservices: Scalable and modular API-based architectures REST API Examples: Implementing Twitter and eBay APIs Native, Web, and Hybrid Apps: API integration strategies  Hands-on Exercises  Using Postman for API requests Calling an API with Python Building an API with AWS Implementing OAuth authentication  </description>
    </item>
    
  </channel>
</rss>
